<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="cmdConfirm.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        83/Qzxx2/7EUYgAAAABJRU5ErkJggg==
</value>
  </data>
</root>